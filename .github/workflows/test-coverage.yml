name: Test Coverage

on: [push, pull_request]

jobs:
  test-coverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Fortran Package Manager
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm

    - name: Install GFortran and gcov
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran gcovr imagemagick

    - name: Run install script and build with coverage flags
      run: |
        chmod +x install.sh
        ./install.sh --flag '-fprofile-arcs -ftest-coverage'

    - name: Run tests with coverage
      run: |
        # Build tests with coverage flags
        fpm build --tests --flag '-fprofile-arcs -ftest-coverage'

        # Test date_and_time function first
        echo "Testing date_and_time function..."
        fpm run test_date_time || echo "date_and_time test failed"

        # Test create_test_cache_dir function
        echo "Testing create_test_cache_dir function..."
        fpm run test_cache_dir || echo "cache_dir test failed"

        # Test cache_lock functionality in minimal form
        echo "Testing cache_lock minimal..."
        fpm run test_cache_lock_minimal || echo "cache_lock_minimal test failed"

        # Test progressive loading of modules
        echo "Testing cache_lock progressive..."
        fpm run test_cache_lock_progressive || echo "cache_lock_progressive test failed"

        # Test exact structure match
        echo "Testing cache_lock exact..."
        fpm run test_cache_lock_exact || echo "cache_lock_exact test failed"

        # Test step by step to isolate hang
        echo "Testing cache_lock step by step..."
        fpm run test_cache_lock_step_by_step || echo "cache_lock_step_by_step test failed"

        # Test exact replica as app instead of test
        echo "Testing cache_lock as app (exact replica of test)..."
        fpm run test_cache_lock_as_app || echo "cache_lock_as_app test failed"

        # Run our custom test runner which provides:
        # - Parallel test execution with better performance
        # - Comprehensive test discovery including integration tests
        # - Detailed failure diagnostics and progress reporting
        # Note: Some tests may have race conditions when run in parallel
        # Run with limited threads to reduce race conditions
        # Known issues:
        # - test_frontend_test_cases: Has many skipped tests due to AST limitations
        # - test_json_workflows: May fail intermittently in parallel execution
        OMP_NUM_THREADS=4 fpm run fortran -- --test -v

    - name: Test installed binary
      run: |
        # Test that the installed binary works
        export PATH="$HOME/.local/bin:$PATH"
        echo 'program test_install; print *, "Install test successful"; end program' > test_install.f90
        fortran test_install.f90
        rm -f test_install.f90

    - name: Generate coverage report
      run: |
        gcovr --root . --exclude 'build/*' --xml -o coverage.xml --print-summary

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
