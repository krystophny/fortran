name: Windows CI/CD

on:
  push:
    branches: [ main, windows-support ]
  pull_request:
    branches: [ main, windows-support ]

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        compiler: [gfortran]
        include:
          - compiler: gfortran
            fc: gfortran

    steps:
    - uses: actions/checkout@v4

    - name: Setup MinGW (MSYS2)
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: false
        path-type: inherit
        install: >-
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-gcc
          git

    - name: Add MinGW to PATH
      run: echo C:\msys64\mingw64\bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    - name: Install FPM
      shell: pwsh
      run: |
        Write-Host "Installing FPM directly from GitHub releases..."
        Invoke-WebRequest -Uri "https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-windows-x86_64-gcc-12.exe" -OutFile "fpm.exe"
        Move-Item -Path "fpm.exe" -Destination "C:\msys64\mingw64\bin\fpm.exe"
        & "C:\msys64\mingw64\bin\fpm.exe" --version

    - name: Test Windows cache directory creation
      run: |
        # Test cache directory creation with Windows paths
        $env:LOCALAPPDATA = "C:\Users\Test\AppData\Local"
        if (Test-Path $env:LOCALAPPDATA) {
          Write-Host "LOCALAPPDATA environment variable set correctly"
        } else {
          Write-Host "Creating test LOCALAPPDATA directory"
          New-Item -ItemType Directory -Path "C:\Users\Test\AppData\Local" -Force
        }
      shell: powershell

    - name: Build project
      run: |
        echo Building project...
        if exist build rmdir /s /q build
        fpm build --compiler gfortran --flag="-cpp"
      shell: cmd

    - name: List build directory
      run: |
        echo "Listing build directory contents:"
        dir /s /b build
      shell: cmd

    - name: Run unit tests
      run: |
        echo Running unit tests...

        REM Find the built executable
        for /r build %%i in (fortran.exe) do set "FORTRAN_EXE=%%i"
        echo Found executable: %FORTRAN_EXE%

        REM Get the current directory
        echo Current directory: %CD%

        REM Run basic smoke test
        echo program test; print *, 'x = 42'; end program > test_windows.f
        echo Test file created at: %CD%\test_windows.f

        REM Create a temp cache directory
        if not exist temp_cache mkdir temp_cache

        REM Run the executable with the test file using custom cache
        "%FORTRAN_EXE%" --cache-dir "%CD%\temp_cache" "%CD%\test_windows.f"
        del /f test_windows.f

        REM Test version flag
        "%FORTRAN_EXE%" --version

        REM Test help flag
        "%FORTRAN_EXE%" --help

        echo Basic Windows functionality tests passed
      shell: cmd

    - name: Test cache functionality
      run: |
        # Test basic cache creation
        if (Test-Path $env:LOCALAPPDATA\fortran) {
          Write-Host "Cache directory exists"
        } else {
          Write-Host "Creating cache directory"
          New-Item -ItemType Directory -Path "$env:LOCALAPPDATA\fortran\cache" -Force
        }

        # Find the fortran executable
        $fortran_exe = Get-ChildItem -Path "build" -Recurse -Filter "fortran.exe" | Select-Object -First 1
        if ($null -eq $fortran_exe) {
          Write-Host "ERROR: Could not find fortran.exe in build directory"
          exit 1
        }
        Write-Host "Found executable: $($fortran_exe.FullName)"

        # Test version
        & $fortran_exe.FullName --version

        # Test with a simple example using full path
        $test_file = Join-Path $pwd "test_windows.f"
        Set-Content -Path $test_file -Value 'real :: x = 3.14'
        Write-Host "Test file created at: $test_file"

        & $fortran_exe.FullName $test_file

        # Clean up
        Remove-Item $test_file -Force
      shell: powershell

    - name: Test module resolution
      run: |
        # Test module resolution functionality
        New-Item -ItemType Directory -Path "test_modules" -Force

        # Create module file
        "module test_mod" | Out-File -FilePath "test_modules\test.f90" -Encoding ASCII
        "  implicit none" | Out-File -FilePath "test_modules\test.f90" -Append -Encoding ASCII
        "  real :: pi = 3.14159" | Out-File -FilePath "test_modules\test.f90" -Append -Encoding ASCII
        "end module test_mod" | Out-File -FilePath "test_modules\test.f90" -Append -Encoding ASCII

        # Create main program
        "program test_prog" | Out-File -FilePath "test_modules\main.f90" -Encoding ASCII
        "  use test_mod" | Out-File -FilePath "test_modules\main.f90" -Append -Encoding ASCII
        "  implicit none" | Out-File -FilePath "test_modules\main.f90" -Append -Encoding ASCII
        "  print *, pi" | Out-File -FilePath "test_modules\main.f90" -Append -Encoding ASCII
        "end program test_prog" | Out-File -FilePath "test_modules\main.f90" -Append -Encoding ASCII

        # Find the fortran executable
        $fortran_exe = Get-ChildItem -Path "build" -Recurse -Filter "fortran.exe" | Select-Object -First 1

        # Run from test_modules directory
        Push-Location test_modules
        & $fortran_exe.FullName main.f90
        Pop-Location

        # Clean up
        Remove-Item -Recurse test_modules -Force
      shell: powershell

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fortran-windows-${{ matrix.compiler }}
        path: build/*/app/fortran.exe
        retention-days: 30

  test-windows-examples:
    needs: build-windows
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup MinGW (MSYS2)
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: false
        path-type: inherit
        install: >-
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-gcc
          git

    - name: Add MinGW to PATH
      run: echo C:\msys64\mingw64\bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    - name: Install FPM
      shell: pwsh
      run: |
        Write-Host "Installing FPM directly from GitHub releases..."
        Invoke-WebRequest -Uri "https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-windows-x86_64-gcc-12.exe" -OutFile "fpm.exe"
        Move-Item -Path "fpm.exe" -Destination "C:\msys64\mingw64\bin\fpm.exe"
        & "C:\msys64\mingw64\bin\fpm.exe" --version

    - name: Build project
      run: |
        echo Building project...
        if exist build rmdir /s /q build
        fpm build --compiler gfortran --flag="-cpp"
      shell: cmd

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: fortran-windows-gfortran
        path: artifacts/

    - name: Test example programs
      run: |
        # Find the fortran executable
        $fortran_exe = Get-ChildItem -Path "build" -Recurse -Filter "fortran.exe" | Select-Object -First 1
        if ($null -eq $fortran_exe) {
          Write-Host "ERROR: Could not find fortran.exe in build directory"
          exit 1
        }
        Write-Host "Found executable: $($fortran_exe.FullName)"

        # Test hello world
        & $fortran_exe.FullName example/hello.f

        # Test type inference
        & $fortran_exe.FullName example/type_inference/calculate.f

        # Test with comments
        & $fortran_exe.FullName example/with_comments.f

        # Test preprocessor examples
        & $fortran_exe.FullName example/preprocessor/hello.f

        Write-Host "All examples tested successfully on Windows"
      shell: powershell

    - name: Performance test
      run: |
        # Find the fortran executable
        $fortran_exe = Get-ChildItem -Path "build" -Recurse -Filter "fortran.exe" | Select-Object -First 1

        # Create a performance test file
        "program perf_test" | Out-File -FilePath perf_test.f -Encoding ASCII
        "  implicit none" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "  integer :: i, n" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "  real :: sum_val" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "  n = 1000000" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "  sum_val = 0.0" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "  do i = 1, n" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "    sum_val = sum_val + real(i)" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "  end do" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "  print *, 'Sum:', sum_val" | Out-File -FilePath perf_test.f -Append -Encoding ASCII
        "end program perf_test" | Out-File -FilePath perf_test.f -Append -Encoding ASCII

        # Time the execution
        $start = Get-Date
        & $fortran_exe.FullName perf_test.f
        $end = Get-Date

        $elapsed = ($end - $start).TotalMilliseconds
        Write-Host "Performance test completed in $elapsed ms"

        # Clean up
        Remove-Item perf_test.f -Force
      shell: powershell
