name: Parallel Tests

on: [push, pull_request]

jobs:
  # Quick unit tests that should run fast
  unit-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        test-group: [core, utilities, cache, runner]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup FPM (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm
    
    - name: Setup FPM (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-windows-x86_64-gcc-12.exe" -OutFile "fpm.exe"
        Move-Item -Path "fpm.exe" -Destination "C:\msys64\mingw64\bin\fpm.exe"
    
    - name: Setup MinGW (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: false
        path-type: inherit
        install: >-
          mingw-w64-x86_64-gcc-fortran
    
    - name: Build
      run: fpm build
    
    - name: Run Core Tests
      if: matrix.test-group == 'core'
      run: |
        fpm test test_lexer_direct
        fpm test test_parser_edge_cases
        fpm test test_frontend_parser_if_statement
        fpm test test_semantic_simple
        fpm test test_scope_manager_basic
    
    - name: Run Utilities Tests
      if: matrix.test-group == 'utilities'
      run: |
        fpm test test_logger_utils
        fpm test test_logger_utils_coverage
        fpm test test_string_utils
        fpm test test_string_utils_coverage
        fpm test test_system_utils_coverage
        fpm test test_system_utils_missing
    
    - name: Run Cache Tests
      if: matrix.test-group == 'cache'
      run: |
        fpm test test_cache
        fpm test test_cache_coverage
        fpm test test_cache_missing
        fpm test test_cache_lock
        fpm test test_cache_fallback
    
    - name: Run Runner Tests
      if: matrix.test-group == 'runner'
      run: |
        fpm test test_runner_paths
        fpm test test_runner_coverage
        fpm test test_runner_missing_lines
        fpm test test_runner_edge_cases

  # Integration tests that take longer
  integration-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        test-group: [cli, notebook, fpm, module]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup FPM (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm
        sudo apt-get update && sudo apt-get install -y imagemagick
    
    - name: Setup FPM (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-windows-x86_64-gcc-12.exe" -OutFile "fpm.exe"
        Move-Item -Path "fpm.exe" -Destination "C:\msys64\mingw64\bin\fpm.exe"
    
    - name: Setup MinGW (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: false
        path-type: inherit
        install: >-
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-imagemagick
    
    - name: Build
      run: fpm build
    
    - name: Run CLI Tests
      if: matrix.test-group == 'cli'
      run: |
        fpm test test_cli_system
        fpm test test_cli_integration
        fpm test test_cli_comprehensive
        fpm test test_cli_json_options
    
    - name: Run Notebook Tests
      if: matrix.test-group == 'notebook'
      run: |
        fpm test test_notebook_parser
        fpm test test_notebook_executor
        fpm test test_notebook_system
        fpm test test_notebook_integration
    
    - name: Run FPM Tests
      if: matrix.test-group == 'fpm'
      run: |
        fpm test test_fpm_generator
        fpm test test_fpm_module_cache
        fpm test test_fpm_version_generation
    
    - name: Run Module Tests
      if: matrix.test-group == 'module'
      run: |
        fpm test test_module_scanner
        fpm test test_module_scanner_extended
        fpm test test_module_scanner_coverage

  # Heavy tests that need more resources
  heavy-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [frontend, integration]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup FPM
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm
        sudo apt-get update && sudo apt-get install -y imagemagick
    
    - name: Build
      run: fpm build
    
    - name: Run Frontend Tests
      if: matrix.test-group == 'frontend'
      run: |
        export OMP_NUM_THREADS=4
        fpm test test_frontend_test_cases
        fpm test test_frontend_parser_derived_types
        fpm test test_frontend_parser_array_params
        fpm test test_frontend_parser_explicit_types
        fpm test test_frontend_full_explicit_params
    
    - name: Run Integration Tests
      if: matrix.test-group == 'integration'
      run: |
        export OMP_NUM_THREADS=4
        fpm test test_parse_and_codegen_arena
        fpm test test_runner_integration_coverage
        fpm test test_runner_comprehensive
        fpm test test_examples

  # Summary job to ensure all tests pass
  test-summary:
    needs: [unit-tests, integration-tests, heavy-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
           [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
           [[ "${{ needs.heavy-tests.result }}" != "success" ]]; then
          echo "Some tests failed"
          exit 1
        fi
        echo "All tests passed!"