name: Tests

# Main test workflow that runs parallel tests with coverage collection
# Windows-specific integration tests are in windows-integration.yml

on: 
  push:
    branches-ignore: [ debug-windows-cache-lock ]
  pull_request:
    branches-ignore: [ debug-windows-cache-lock ]

jobs:
  # Quick unit tests with coverage
  unit-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]  # Coverage only on Linux for now
        test-group: [core, utilities, cache, runner]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python for coverage
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install gcovr
      run: pip install gcovr
    
    - name: Install FPM
      uses: fortran-lang/setup-fpm@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup problem matcher
      run: echo "::add-matcher::.github/gfortran-problem-matcher.json"
    
    - name: Build with coverage flags
      run: |
        fpm build --flag "-coverage -g"
        
    - name: Run test group - ${{ matrix.test-group }}
      run: |
        chmod +x scripts/run-test-group.sh
        ./scripts/run-test-group.sh ${{ matrix.test-group }}
      env:
        OMP_NUM_THREADS: 4

    - name: Generate coverage report
      run: |
        mkdir -p coverage
        gcovr --root . \
              --filter 'src/' \
              --exclude 'test/' \
              --exclude 'example/' \
              --xml coverage/coverage-${{ matrix.test-group }}.xml \
              --html-details coverage/coverage-${{ matrix.test-group }}.html \
              --print-summary

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.test-group }}
        path: coverage/
        retention-days: 7

  # Full test suite
  full-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        fc: [gfortran]
        include:
          - os: ubuntu-latest
            fc: gfortran
            gcc: gcc
          - os: macos-latest  
            fc: gfortran-14
            gcc: gcc-14
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Fortran compiler (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "FC=${{ matrix.fc }}" >> $GITHUB_ENV
        echo "CC=${{ matrix.gcc }}" >> $GITHUB_ENV
    
    - name: Install FPM
      uses: fortran-lang/setup-fpm@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup problem matcher
      run: echo "::add-matcher::.github/gfortran-problem-matcher.json"
    
    - name: Run tests
      run: |
        # All tests with proper OpenMP settings
        OMP_NUM_THREADS=2 fpm test --compiler ${{ matrix.fc }}