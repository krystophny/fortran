name: Tests

# Main test workflow that runs parallel tests with coverage collection
# Windows-specific integration tests are in windows-integration.yml

on: [push, pull_request]

jobs:
  # Quick unit tests with coverage
  unit-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]  # Coverage only on Linux for now
        test-group: [core, utilities, cache, runner]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache FPM binary
      id: cache-fpm
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/fpm
        key: ${{ runner.os }}-fpm-0.12.0
    
    - name: Setup FPM
      if: steps.cache-fpm.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm
    
    - name: Cache apt packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: gfortran gcovr
        version: 1.0
    
    - name: Setup registry
      run: |
        mkdir -p $HOME/.config/fortran
        cp registry.toml $HOME/.config/fortran/
    
    - name: Cache FPM dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/fpm
          build/dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-
    
    - name: Restore build cache
      uses: actions/cache@v4
      id: cache-build
      with:
        path: build
        key: ${{ runner.os }}-build-coverage-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-coverage-
    
    - name: Build all tests with coverage
      if: steps.cache-build.outputs.cache-hit != 'true'
      run: |
        # Build all tests with coverage flags
        fpm build --tests --profile debug --flag '-fprofile-arcs -ftest-coverage -g'
        
        # Debug: Show build directory structure
        echo "Build directory structure:"
        find build -type f -name "*.gcno" | head -10
    
    - name: Run Core Tests
      if: matrix.test-group == 'core'
      run: |
        fpm test test_lexer_direct --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_parser_edge_cases --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_frontend_parser_if_statement --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_semantic_simple --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_scope_manager_basic --profile debug --flag '-fprofile-arcs -ftest-coverage'
        # Also run the main executable for coverage
        echo "print *, 'test'" > test_coverage.f
        ./build/gfortran_debug/app/fortran test_coverage.f || find build -name fortran -type f -executable -exec {} test_coverage.f \;
        rm -f test_coverage.f
    
    - name: Run Utilities Tests
      if: matrix.test-group == 'utilities'
      run: |
        fpm test test_logger_utils --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_logger_utils_coverage --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_string_utils --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_string_utils_coverage --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_system_utils_coverage --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_system_utils_missing --profile debug --flag '-fprofile-arcs -ftest-coverage'
    
    - name: Run Cache Tests
      if: matrix.test-group == 'cache'
      run: |
        fpm test test_cache --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_cache_coverage --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_cache_missing --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_cache_lock --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_cache_fallback --profile debug --flag '-fprofile-arcs -ftest-coverage'
    
    - name: Run Runner Tests
      if: matrix.test-group == 'runner'
      run: |
        fpm test test_runner_paths --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_runner_coverage --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_runner_missing_lines --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_runner_edge_cases --profile debug --flag '-fprofile-arcs -ftest-coverage'
        # Test the main executable with various options
        echo "program test; print *, 'hello'; end program" > test_runner.f
        FORTRAN_EXE=$(find build -name fortran -type f -executable | grep -v test | head -1)
        $FORTRAN_EXE test_runner.f || true
        $FORTRAN_EXE --help || true
        rm -f test_runner.f a.out
    
    - name: Generate coverage data
      run: |
        # Debug: Show where coverage files are located
        echo "Coverage files (.gcda):"
        find . -name "*.gcda" | head -10
        echo "Coverage files (.gcno):"
        find . -name "*.gcno" | head -10
        
        # Find all .gcda files and copy them to a central location
        mkdir -p coverage-data
        find . -name "*.gcda" -exec cp --parents {} coverage-data/ \;
        find . -name "*.gcno" -exec cp --parents {} coverage-data/ \;
        
        # Generate intermediate coverage info
        # FPM builds in build/gfortran_debug with our profile
        echo "Looking for source files in build directory:"
        find build -name "*.f90" -o -name "*.F90" | head -5
        
        gcovr --root . \
          --filter 'src/.*' \
          --filter 'app/main.f90' \
          --exclude 'test/.*' \
          --exclude 'example/.*' \
          --exclude 'app/test_.*' \
          --exclude 'draft/.*' \
          --gcov-use-existing-files \
          --json coverage-${{ matrix.test-group }}.json \
          --print-summary
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-unit-${{ matrix.test-group }}
        path: |
          coverage-*.json
          coverage-data/
        retention-days: 1

  # Integration tests with coverage
  integration-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [cli, notebook, fpm, module]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache FPM binary
      id: cache-fpm-int
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/fpm
        key: ${{ runner.os }}-fpm-0.12.0
    
    - name: Setup FPM
      if: steps.cache-fpm-int.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm
    
    - name: Cache apt packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: imagemagick gcovr
        version: 1.0
    
    - name: Setup registry
      run: |
        mkdir -p $HOME/.config/fortran
        cp registry.toml $HOME/.config/fortran/
    
    - name: Cache FPM dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/fpm
          build/dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-
    
    - name: Restore build cache
      uses: actions/cache@v4
      id: cache-build
      with:
        path: build
        key: ${{ runner.os }}-build-coverage-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-coverage-
    
    - name: Build all tests with coverage
      if: steps.cache-build.outputs.cache-hit != 'true'
      run: |
        # Build all tests with coverage flags
        fpm build --tests --profile debug --flag '-fprofile-arcs -ftest-coverage -g'
        
        # Debug: Show build directory structure
        echo "Build directory structure:"
        find build -type f -name "*.gcno" | head -10
    
    - name: Run CLI Tests
      if: matrix.test-group == 'cli'
      run: |
        fpm test test_cli_system --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_cli_integration --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_cli_comprehensive --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_cli_json_options --profile debug --flag '-fprofile-arcs -ftest-coverage'
        # Test CLI with various flags
        echo "x = 1" > test_cli.f
        FORTRAN_EXE=$(find build -name fortran -type f -executable | grep -v test | head -1)
        $FORTRAN_EXE test_cli.f -v || true
        $FORTRAN_EXE test_cli.f --json || true
        $FORTRAN_EXE test_cli.f --test || true
        rm -f test_cli.f
    
    - name: Run Notebook Tests
      if: matrix.test-group == 'notebook'
      run: |
        fpm test test_notebook_parser --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_notebook_executor --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_notebook_system --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_notebook_integration --profile debug --flag '-fprofile-arcs -ftest-coverage'
    
    - name: Run FPM Tests
      if: matrix.test-group == 'fpm'
      run: |
        fpm test test_fpm_generator --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_fpm_module_cache --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_fpm_version_generation --profile debug --flag '-fprofile-arcs -ftest-coverage'
    
    - name: Run Module Tests
      if: matrix.test-group == 'module'
      run: |
        fpm test test_module_scanner --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_module_scanner_extended --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_module_scanner_coverage --profile debug --flag '-fprofile-arcs -ftest-coverage'
    
    - name: Generate coverage data
      run: |
        # Debug: Show where coverage files are located
        echo "Coverage files (.gcda):"
        find . -name "*.gcda" | head -10
        echo "Coverage files (.gcno):"
        find . -name "*.gcno" | head -10
        
        mkdir -p coverage-data
        find . -name "*.gcda" -exec cp --parents {} coverage-data/ \;
        find . -name "*.gcno" -exec cp --parents {} coverage-data/ \;
        
        gcovr --root . \
          --exclude 'build/*' \
          --exclude 'test/*' \
          --exclude 'example/*' \
          --exclude 'app/test_*.f90' \
          --exclude 'draft/*' \
          --json coverage-${{ matrix.test-group }}.json \
          --print-summary
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-integration-${{ matrix.test-group }}
        path: |
          coverage-*.json
          coverage-data/
        retention-days: 1

  # Heavy tests with coverage
  heavy-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [frontend, integration]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache FPM binary
      id: cache-fpm-heavy
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/fpm
        key: ${{ runner.os }}-fpm-0.12.0
    
    - name: Setup FPM
      if: steps.cache-fpm-heavy.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm
    
    - name: Cache apt packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: imagemagick gcovr
        version: 1.0
    
    - name: Setup registry
      run: |
        mkdir -p $HOME/.config/fortran
        cp registry.toml $HOME/.config/fortran/
    
    - name: Cache FPM dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/fpm
          build/dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-
    
    - name: Restore build cache
      uses: actions/cache@v4
      id: cache-build
      with:
        path: build
        key: ${{ runner.os }}-build-coverage-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-coverage-
    
    - name: Build all tests with coverage
      if: steps.cache-build.outputs.cache-hit != 'true'
      run: |
        # Build all tests with coverage flags
        fpm build --tests --profile debug --flag '-fprofile-arcs -ftest-coverage -g'
        
        # Debug: Show build directory structure
        echo "Build directory structure:"
        find build -type f -name "*.gcno" | head -10
    
    - name: Run Frontend Tests
      if: matrix.test-group == 'frontend'
      run: |
        export OMP_NUM_THREADS=4
        fpm test test_frontend_test_cases --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_frontend_parser_derived_types --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_frontend_parser_array_params --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_frontend_parser_explicit_types --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_frontend_full_explicit_params --profile debug --flag '-fprofile-arcs -ftest-coverage'
    
    - name: Run Integration Tests
      if: matrix.test-group == 'integration'
      run: |
        export OMP_NUM_THREADS=4
        fpm test test_parse_and_codegen_arena --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_runner_integration_coverage --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_runner_comprehensive --profile debug --flag '-fprofile-arcs -ftest-coverage'
        fpm test test_examples --profile debug --flag '-fprofile-arcs -ftest-coverage'
    
    - name: Generate coverage data
      run: |
        # Debug: Show where coverage files are located
        echo "Coverage files (.gcda):"
        find . -name "*.gcda" | head -10
        echo "Coverage files (.gcno):"
        find . -name "*.gcno" | head -10
        
        mkdir -p coverage-data
        find . -name "*.gcda" -exec cp --parents {} coverage-data/ \;
        find . -name "*.gcno" -exec cp --parents {} coverage-data/ \;
        
        gcovr --root . \
          --exclude 'build/*' \
          --exclude 'test/*' \
          --exclude 'example/*' \
          --exclude 'app/test_*.f90' \
          --exclude 'draft/*' \
          --json coverage-${{ matrix.test-group }}.json \
          --print-summary
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-heavy-${{ matrix.test-group }}
        path: |
          coverage-*.json
          coverage-data/
        retention-days: 1

  # Merge coverage and upload to Codecov
  coverage-merge:
    needs: [unit-tests, integration-tests, heavy-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install gcovr
      run: |
        sudo apt-get update
        sudo apt-get install -y gcovr
    
    - name: Download all coverage artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-*
        merge-multiple: true
    
    - name: Restore coverage data structure
      run: |
        # Debug: List downloaded artifacts
        echo "Downloaded artifacts:"
        find . -name "*.json" -type f | head -20
        find . -name "*.gcda" -type f | head -20
        find . -name "*.gcno" -type f | head -20
        
        # Restore the original directory structure for .gcda and .gcno files
        # The coverage-data directory contains files with their full paths preserved
        if [ -d "coverage-data" ]; then
          cd coverage-data
          # Copy all files preserving directory structure
          find . -name "*.gcda" -o -name "*.gcno" | while read -r file; do
            # Remove the leading ./ from the path
            clean_path="${file#./}"
            # Create parent directory if needed
            mkdir -p "../$(dirname "$clean_path")"
            # Copy the file to its original location
            cp "$file" "../$clean_path"
          done
          cd ..
        fi
        
        # Debug: Verify files were restored
        echo "Restored coverage files:"
        find . -name "*.gcda" -type f | head -10
    
    - name: Merge coverage reports
      run: |
        # List all JSON files for debugging
        echo "Found coverage JSON files:"
        ls -la coverage-*.json || echo "No JSON files found"
        
        # First, generate a fresh coverage report from the restored .gcda files
        # This ensures gcovr can find the source files properly
        echo "Generating coverage from restored .gcda files..."
        gcovr --root . \
          --filter 'src/.*' \
          --filter 'app/main.f90' \
          --exclude 'test/.*' \
          --exclude 'example/.*' \
          --exclude 'app/test_.*' \
          --exclude 'draft/.*' \
          --gcov-use-existing-files \
          --json coverage-merged-gcda.json \
          --print-summary || echo "Direct .gcda coverage generation completed"
        
        # Now merge all JSON coverage reports including the one from .gcda files
        echo "Merging all coverage reports..."
        gcovr --add-tracefile coverage-*.json \
          --root . \
          --filter 'src/.*' \
          --filter 'app/main.f90' \
          --exclude 'test/.*' \
          --exclude 'example/.*' \
          --exclude 'app/test_.*' \
          --exclude 'draft/.*' \
          --xml -o coverage.xml \
          --html-details coverage-report.html \
          --print-summary
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-parallel
        fail_ci_if_error: true
    
    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: coverage-report*
        retention-days: 30
    
    - name: Check coverage threshold
      run: |
        # Extract coverage percentage from XML
        coverage=$(grep -oP 'line-rate="\K[^"]+' coverage.xml | head -1)
        coverage_percent=$(echo "$coverage * 100" | bc -l | cut -d. -f1)
        
        echo "Total coverage: ${coverage_percent}%"
        
        # Fail if coverage drops below threshold
        if [ "$coverage_percent" -lt "45" ]; then
          echo "Coverage ${coverage_percent}% is below threshold of 45%"
          exit 1
        fi

  # Windows tests (without coverage for now)
  windows-tests:
    runs-on: windows-latest
    strategy:
      matrix:
        test-group: [core, utilities]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: false
        path-type: inherit
        install: >-
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-gcc
          git
      # Note: msys2/setup-msys2 has its own caching mechanism
    
    - name: Add MinGW to PATH
      run: echo C:\msys64\mingw64\bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh
    
    - name: Cache FPM binary (Windows)
      id: cache-fpm-win
      uses: actions/cache@v4
      with:
        path: C:\msys64\mingw64\bin\fpm.exe
        key: ${{ runner.os }}-fpm-0.12.0
    
    - name: Install FPM
      if: steps.cache-fpm-win.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Write-Host "Installing FPM directly from GitHub releases..."
        Invoke-WebRequest -Uri "https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-windows-x86_64-gcc-12.exe" -OutFile "fpm.exe"
        Move-Item -Path "fpm.exe" -Destination "C:\msys64\mingw64\bin\fpm.exe"
        & "C:\msys64\mingw64\bin\fpm.exe" --version
    
    - name: Setup registry (Windows)
      shell: pwsh
      run: |
        $configDir = Join-Path $env:LOCALAPPDATA "fortran\config"
        New-Item -ItemType Directory -Force -Path $configDir | Out-Null
        Copy-Item "registry.toml" -Destination $configDir
    
    - name: Cache FPM dependencies (Windows)
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\fpm
          build\dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-
    
    - name: Restore build cache
      uses: actions/cache@v4
      id: cache-build-win
      with:
        path: build
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Build all tests
      if: steps.cache-build-win.outputs.cache-hit != 'true'
      run: |
        echo "Building project and all tests..."
        fpm build --tests
      shell: cmd
    
    - name: Run Core Tests
      if: matrix.test-group == 'core'
      run: |
        fpm test test_lexer_direct
        fpm test test_parser_edge_cases
        fpm test test_semantic_simple
      shell: cmd
    
    - name: Run Utilities Tests
      if: matrix.test-group == 'utilities'
      run: |
        fpm test test_logger_utils
        fpm test test_string_utils
        fpm test test_system_utils_coverage
      shell: cmd

  # macOS tests
  macos-tests:
    runs-on: macos-latest
    strategy:
      matrix:
        test-group: [core, utilities]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Micromamba
      uses: mamba-org/setup-micromamba@v2
      with:
        micromamba-version: 'latest'
        environment-name: test-env
        create-args: >-
          python=3.11
          fpm
          gfortran
        init-shell: bash
        cache-environment: true
        channels: conda-forge
    
    - name: Check versions
      shell: bash -el {0}
      run: |
        echo "GCC version:"
        gfortran --version
        echo "FPM version:"
        fpm --version
    
    - name: Setup registry
      shell: bash -el {0}
      run: |
        mkdir -p $HOME/.config/fortran
        cp registry.toml $HOME/.config/fortran/
    
    - name: Cache FPM dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/fpm
          build/dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-
    
    - name: Restore build cache
      uses: actions/cache@v4
      id: cache-build-mac
      with:
        path: build
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Build all tests
      if: steps.cache-build-mac.outputs.cache-hit != 'true'
      shell: bash -el {0}
      run: |
        echo "Building project and all tests..."
        # On macOS, patch fpm.toml to remove OpenMP
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          # Backup original fpm.toml
          cp fpm.toml fpm.toml.bak
          # Remove OpenMP flags from fpm.toml
          sed -i '' 's/-fopenmp//g' fpm.toml
          # Also try to set compiler flags
          export CC="clang"
          export CFLAGS="-O2"
          export LDFLAGS=""
        fi
        fpm update
        fpm build --tests --flag="-fno-openmp"
    
    - name: Run Core Tests
      if: matrix.test-group == 'core'
      shell: bash -el {0}
      run: |
        fpm test test_lexer_direct
        fpm test test_parser_edge_cases
        fpm test test_semantic_simple
    
    - name: Run Utilities Tests
      if: matrix.test-group == 'utilities'
      shell: bash -el {0}
      run: |
        fpm test test_logger_utils
        fpm test test_string_utils
        fpm test test_system_utils_coverage