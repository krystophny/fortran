Project is up to date
=== Frontend Statement Tests ===

Test 1: Use statement
  ✓ PASS: Use statement parsed correctly
Test 2: Print statement
  ✓ PASS: Print statement parsed correctly
Test 3: Multiple statements
    Expected:
program main
    implicit none
    integer :: x

    x = 42
    print *, x
end program main
    Got:
program main
    implicit none
    integer(4) :: x

    x = 42
    print *, x
end program main
  ✗ FAIL: Multiple statements parsing failed

Frontend statement tests: 2/3 passed
ERROR STOP Some frontend statement tests failed!

Error termination. Backtrace:
#0  0x4036d3 in test_frontend_statements
	at test/test_frontend_statements.f90:21
#1  0x403d27 in main
	at test/test_frontend_statements.f90:20
=== Example Test Cases ===

Test: use_statement
  ✓ PASS
Test: print_statement
  ✓ PASS
Test: multi_statement
  ✓ PASS

Example test cases: 3/3 passed
=============================================================
Fortran CLI Cache Behavior Tests
=============================================================

Test 1: Simple Program Compilation Behavior
-------------------------------------------
First run (cold cache):
  ✓ Files compiled as expected
Second run (warm cache):
  ✓ Cache used as expected
  ✓ PASS: Caching behavior correct

Test 2: Local Modules Compilation Behavior
------------------------------------------
First run (should compile modules):
  ✓ Modules compiled as expected
Second run (should use cache):
  ✓ Module cache used as expected
  ✓ PASS: Module caching behavior correct

Test 3: Incremental Compilation Behavior
----------------------------------------
Initial build:
  ✓ Full compilation as expected
Incremental build:
  ✓ Cache used for unchanged modules
  ✓ PASS: Incremental compilation working


=============================================================
Benchmark Summary
=============================================================
Tests passed: 3
Tests failed: 0
 === Comprehensive Runner Tests ===
 
 Test 1: File not found error
Error: File not found: nonexistent_file.f90
   PASS: File not found error handled correctly
 Test 2: Invalid file extension
Error: Input file must have .f90, .F90, .f, or .F extension
   PASS: Invalid extension error handled correctly
 Test 3: Basic .f90 file execution
 + mkdir -p /home/ert/.cache/fortran/modules
 + mkdir -p /home/ert/.cache/fortran/modules/gfortran
 + mkdir -p /home/ert/.cache/fortran/modules/gfortran/13.0.0
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
Error: Invalid character in name at (1)
<ERROR> stopping due to failed compilation
   FAIL: Expected exit code 0, got            1
 Test 4: .f file preprocessing
Processing Simple Fortran file with frontend...
Cache miss: Setting up new build
Module cache enabled for dependency optimization
 + mkdir -p build/dependencies
[  0%]                       main.f90
[ 50%]                       main.f90  done.
[ 50%]                test_preprocess
[100%]                test_preprocess  done.
[100%] Project compiled successfully.
Caching newly compiled dependency modules...
/home/ert/.cache/fortran/test_preprocess_fpm_F8CCF21B20FD9320/build/gfortran_764BCDC58073FF0F/test_preprocess/app_main.f90.o
Module caching completed
          42
   PASS: .f file preprocessing successful
 Test 5: Cache hit scenario
Cache hit: Using existing build
[  0%]       test_simple_prog_out.f90
[ 16%]       test_simple_prog_out.f90  done.

././src/test_simple_prog_out.f90:1:2:

    1 | /home/ert/.cache/fortran/test_simple_prog_fpm_A1660FF0737DB74C/build/gfortran_E34ED9D522D08DD2/test_simple_prog/app_main.f90.o
      |  1
Error: Invalid character in name at (1)
compilation terminated due to -fmax-errors=1.
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
<ERROR> stopping due to failed compilation
STOP 1
   FAIL: First run failed with exit code            1
 Test 6: Verbose modes
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
Error: Invalid character in name at (1)
<ERROR> stopping due to failed compilation
   FAIL: Verbose level 0 failed
 Test 7: Custom cache directory
Cache miss: Setting up new build
Module cache enabled for dependency optimization
 + mkdir -p build/dependencies
[  0%]       test_simple_prog_out.f90
[ 16%]       test_simple_prog_out.f90  done.

././src/test_simple_prog_out.f90:1:2:

    1 | /home/ert/.cache/fortran/test_simple_prog_fpm_A1660FF0737DB74C/build/gfortran_E34ED9D522D08DD2/test_simple_prog/app_main.f90.o
      |  1
Error: Invalid character in name at (1)
compilation terminated due to -fmax-errors=1.
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
<ERROR> stopping due to failed compilation
STOP 1
   FAIL: Custom cache directory failed with exit code            1
 Test 8: Custom config directory
Cache miss: Setting up new build
 Created default registry at: /tmp/my_custom_config/registry.toml
Module cache enabled for dependency optimization
 + mkdir -p build/dependencies
[  0%]       test_simple_prog_out.f90
[ 16%]       test_simple_prog_out.f90  done.

././src/test_simple_prog_out.f90:1:2:

    1 | /home/ert/.cache/fortran/test_simple_prog_fpm_A1660FF0737DB74C/build/gfortran_E34ED9D522D08DD2/test_simple_prog/app_main.f90.o
      |  1
Error: Invalid character in name at (1)
compilation terminated due to -fmax-errors=1.
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
<ERROR> stopping due to failed compilation
STOP 1
   FAIL: Custom config directory failed with exit code            1
 Test 9: Parallel jobs flag
Cache miss: Setting up new build
Module cache enabled for dependency optimization
Note: Parallel builds requested (4 jobs) but current FPM version does not support --jobs flag
 + mkdir -p build/dependencies
[  0%]       test_simple_prog_out.f90
[ 16%]       test_simple_prog_out.f90  done.

././src/test_simple_prog_out.f90:1:2:

    1 | /home/ert/.cache/fortran/test_simple_prog_fpm_A1660FF0737DB74C/build/gfortran_E34ED9D522D08DD2/test_simple_prog/app_main.f90.o
      |  1
Error: Invalid character in name at (1)
compilation terminated due to -fmax-errors=1.
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
<ERROR> stopping due to failed compilation
STOP 1
   FAIL: Parallel jobs failed with exit code            1
 Test 10: No-wait locking
Cache miss: Setting up new build
Module cache enabled for dependency optimization
 + mkdir -p build/dependencies
[  0%]       test_simple_prog_out.f90
[ 16%]       test_simple_prog_out.f90  done.

././src/test_simple_prog_out.f90:1:2:

    1 | /home/ert/.cache/fortran/test_simple_prog_fpm_A1660FF0737DB74C/build/gfortran_E34ED9D522D08DD2/test_simple_prog/app_main.f90.o
      |  1
Error: Invalid character in name at (1)
compilation terminated due to -fmax-errors=1.
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
<ERROR> stopping due to failed compilation
STOP 1
   FAIL: No-wait locking failed with exit code            1
 Test 11: Local modules
Cache miss: Setting up new build
Found 1 external module dependencies
Module cache enabled for dependency optimization
Checking module cache for dependencies...
  ○ Module not cached: my_module
 + mkdir -p build/dependencies
[  0%]                  my_module.f90
[ 25%]                  my_module.f90  done.
[ 25%]                      libmain.a
[ 50%]                      libmain.a  done.
[ 50%]                       main.f90
[ 75%]                       main.f90  done.
[ 75%]                           main
[100%]                           main  done.
[100%] Project compiled successfully.
Caching newly compiled dependency modules...
/home/ert/.cache/fortran/main_fpm_AAFA2EE2AD6DAF7E/build/gfortran_E34ED9D522D08DD2/my_module.mod
/home/ert/.cache/fortran/main_fpm_AAFA2EE2AD6DAF7E/build/gfortran_E34ED9D522D08DD2/main/src_my_module.f90.o
/home/ert/.cache/fortran/main_fpm_AAFA2EE2AD6DAF7E/build/gfortran_E34ED9D522D08DD2/main/app_main.f90.o
Module caching completed
 Hello from module
   PASS: Local modules handling successful
 Test 12: Error handling paths
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
Error: Invalid character in name at (1)
<ERROR> stopping due to failed compilation
   PASS: Error handling in quiet mode successful
Cache hit: Using existing build
[  0%]       test_simple_prog_out.f90
[ 16%]       test_simple_prog_out.f90  done.

././src/test_simple_prog_out.f90:1:2:

    1 | /home/ert/.cache/fortran/test_simple_prog_fpm_A1660FF0737DB74C/build/gfortran_E34ED9D522D08DD2/test_simple_prog/app_main.f90.o
      |  1
Error: Invalid character in name at (1)
compilation terminated due to -fmax-errors=1.
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
<ERROR> stopping due to failed compilation
STOP 1
   PASS: Error handling paths successful
 
 Some runner tests FAILED!
STOP 1
 === Runner Module Edge Case Tests ===

 Test 1: Non-existent file handling
Error: File not found: /tmp/definitely_does_not_exist_12345.f90
Error: File not found: 
   PASS: Non-existent file handling
 Test 2: Invalid file extensions
Error: Input file must have .f90, .F90, .f, or .F extension
Error: Input file must have .f90, .F90, .f, or .F extension
   PASS: Invalid extensions
 Test 3: Empty file handling
Project structure hash: fpm_F8A95CDDB6B53828
Cache miss: Setting up new build
Module cache enabled for dependency optimization
Note: Parallel builds requested (1 jobs) but current FPM version does not support --jobs flag
 + mkdir -p build/dependencies
 <INFO> BUILD_NAME: build/gfortran
 <INFO> COMPILER:  gfortran
 <INFO> C COMPILER:  gcc
 <INFO> CXX COMPILER: g++
 <INFO> COMPILER OPTIONS:   -Wall -Wextra -Wno-external-argument-mismatch -fPIC -fmax-errors=1 -g -fcheck=bounds -fcheck=array-temps -fbacktrace -fcoarray=single -fPIC
 <INFO> C COMPILER OPTIONS:  
 <INFO> CXX COMPILER OPTIONS: 
 <INFO> LINKER OPTIONS:  
 <INFO> INCLUDE DIRECTORIES:  []
 + mkdir -p build/gfortran_8E5F19168834AE28
 + mkdir -p build/gfortran_E34ED9D522D08DD2
 + mkdir -p build/gfortran_2E1845944E00BB22
[  0%]       test_simple_prog_out.f90
 + mkdir -p build/gfortran_E34ED9D522D08DD2/test_runner_empty/
 + gfortran -c ././src/test_simple_prog_out.f90   -Wall -Wextra -Wno-external-argument-mismatch -fPIC -fmax-errors=1 -g -fcheck=bounds -fcheck=array-temps -fbacktrace -fcoarray=single -fPIC -fimplicit-none -Werror=implicit-interface -ffree-form -J build/gfortran_E34ED9D522D08DD2 -Ibuild/gfortran_E34ED9D522D08DD2 -o build/gfortran_E34ED9D522D08DD2/test_runner_empty/src_test_simple_prog_out.f90.o
././src/test_simple_prog_out.f90:1:2:

    1 | /home/ert/.cache/fortran/test_simple_prog_fpm_A1660FF0737DB74C/build/gfortran_E34ED9D522D08DD2/test_simple_prog/app_main.f90.o
      |  1
Error: Invalid character in name at (1)
compilation terminated due to -fmax-errors=1.
[ 16%]       test_simple_prog_out.f90  done.

././src/test_simple_prog_out.f90:1:2:

    1 | /home/ert/.cache/fortran/test_simple_prog_fpm_A1660FF0737DB74C/build/gfortran_E34ED9D522D08DD2/test_simple_prog/app_main.f90.o
      |  1
Error: Invalid character in name at (1)
compilation terminated due to -fmax-errors=1.
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
<ERROR> stopping due to failed compilation
STOP 1
   PASS: Empty file handling
 Test 4: Custom directory handling
Cache miss: Setting up new build
 Created default registry at: /tmp/test_runner_custom_config/registry.toml
Module cache enabled for dependency optimization
Note: Parallel builds requested (1 jobs) but current FPM version does not support --jobs flag
 + mkdir -p build/dependencies
[  0%]       test_simple_prog_out.f90
[ 16%]       test_simple_prog_out.f90  done.

././src/test_simple_prog_out.f90:1:2:

    1 | /home/ert/.cache/fortran/test_simple_prog_fpm_A1660FF0737DB74C/build/gfortran_E34ED9D522D08DD2/test_simple_prog/app_main.f90.o
      |  1
Error: Invalid character in name at (1)
compilation terminated due to -fmax-errors=1.
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
<ERROR> stopping due to failed compilation
STOP 1
   PASS: Custom directories
 Test 5: Preprocessing error handling
Processing Simple Fortran file with frontend...
Creating preprocessed file: /home/ert/.cache/fortran/preprocessed_fpm_CD2D7311DDF047E5.f90
Using AST-based preprocessor
Preprocessed file ready: /home/ert/.cache/fortran/preprocessed_fpm_CD2D7311DDF047E5.f90
Project structure hash: fpm_F8A95CDDB6B53828
Cache miss: Setting up new build
Module cache enabled for dependency optimization
Note: Parallel builds requested (1 jobs) but current FPM version does not support --jobs flag
 + mkdir -p build/dependencies
 <INFO> BUILD_NAME: build/gfortran
 <INFO> COMPILER:  gfortran
 <INFO> C COMPILER:  gcc
 <INFO> CXX COMPILER: g++
 <INFO> COMPILER OPTIONS:   -fdefault-real-8 -fdefault-double-8
 <INFO> C COMPILER OPTIONS:  
 <INFO> CXX COMPILER OPTIONS: 
 <INFO> LINKER OPTIONS:  
 <INFO> INCLUDE DIRECTORIES:  []
 + mkdir -p build/gfortran_764BCDC58073FF0F
 + mkdir -p build/gfortran_2B32A0D7BABF586B
[  0%]                       main.f90
 + mkdir -p build/gfortran_764BCDC58073FF0F/test_runner_preprocess/
 + gfortran -c app/main.f90   -fdefault-real-8 -fdefault-double-8 -fimplicit-none -Werror=implicit-interface -ffree-form -J build/gfortran_764BCDC58073FF0F -Ibuild/gfortran_764BCDC58073FF0F -o build/gfortran_764BCDC58073FF0F/test_runner_preprocess/app_main.f90.o
app/main.f90:5:5:

    5 |     c
      |     1
Error: Unclassifiable statement at (1)
[ 50%]                       main.f90  done.

app/main.f90:5:5:

    5 |     c
      |     1
Error: Unclassifiable statement at (1)
<ERROR> Compilation failed for object " app_main.f90.o "
<ERROR> stopping due to failed compilation
STOP 1
   PASS: Preprocessing errors
 Test 6: Parallel execution options
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
Error: Invalid character in name at (1)
<ERROR> stopping due to failed compilation
   WARNING: Parallel build failed
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
Error: Invalid character in name at (1)
<ERROR> stopping due to failed compilation
<ERROR> Compilation failed for object " src_test_simple_prog_out.f90.o "
Error: Invalid character in name at (1)
<ERROR> stopping due to failed compilation
   PASS: Parallel execution

 All runner edge case tests passed!
STOP 0
 === FPM Version Generation Tests ===\
 PASS: pyplot-fortran with version v1.0.0 found in fpm.toml
 PASS: fortplotlib without version found in fpm.toml
 All FPM version generation tests passed!
 === FPM Generator Tests ===

 Test 1: Generate fpm.toml with pyplot dependency
 PASS: Generated fpm.toml with correct dependencies

 Test 2: Multiple dependencies
 PASS: Multiple dependencies correctly added

 All FPM generator tests passed!
 === Notebook Executor Unit Tests ===

 Test 1: Basic notebook execution
   PASS
 Test 2: Execution results structure
   PASS
 Test 3: Multiple cell execution
   PASS
 Test 4: Error handling
   PASS
 Test 5: Cache directory usage
   PASS
 Test 6: Empty notebook handling
   PASS
 Test 7: Mixed cell types
   PASS
 Test 8: Variable persistence structure
   PASS
 Test 9: Print statement output structure
   PASS
 Test 10: Memory management
   PASS

 All notebook executor tests passed!
STOP 0
 Testing notebook parser...
   Test 1: Simple notebook...
     PASSED
   Test 2: Default code cell...
     PASSED
   Test 3: Multiple cells...
     PASSED
   Test 4: Empty cells...
     PASSED
   Test 5: Nested code structures...
     PASSED
 All notebook parser tests passed!
STOP 0
 === Renderer Simple Tests ===

 Test 1: Basic rendering
   PASS: Basic rendering
 Test 2: Save markdown
   PASS: Save markdown

 All renderer simple tests passed!
STOP 0
 === Notebook Figure Integration Tests ===

   Test 1: Figure base64 embedding...
     ✓ Base64 conversion working
     ✓ Figure embedded correctly in markdown
   Test 2: Show() call interception...
WARNING: The convert command is deprecated in IMv7, use "magick" instead of "convert" or "magick convert"

     ✓ Show() call interception working
   Test 3: End-to-end notebook with figures...
     ✓ End-to-end notebook execution working

 All notebook figure integration tests passed!
STOP 0
 === Notebook Examples Tests ===

 Test 1: simple_math.f example
   PASS
 Test 2: arrays_loops.f example
   PASS
 Test 3: control_flow.f example
   PASS

 All notebook example tests passed!
STOP 0
 Testing notebook integration...
   Test 1: Simple notebook execution...
     PASSED
   Test 2: Markdown rendering...
     PASSED
   Test 3: Multi-cell execution...
     PASSED
   Test 4: Plot capture (mock)...
     PASSED
 All notebook integration tests passed!
STOP 0
 === Notebook Parser Edge Case Tests ===

 Test 1: Empty notebook parsing
   PASS: Empty notebook parsing
 Test 2: Malformed cell markers
   PASS: Malformed markers
 Test 3: Nested and consecutive markers
   PASS: Nested markers
 Test 4: Large content handling
   PASS: Large content
 Test 5: Special characters and encodings
   PASS: Special characters
 Test 6: Mixed content and file operations
   WARNING: Non-existent file produced cells
   PASS: Mixed content

 All notebook parser edge case tests passed!
STOP 0
 === Extended Notebook Renderer Tests ===

 Test 1: Markdown cell edge cases
   PASS: Markdown edge cases
 Test 2: Code cell output formatting
   PASS: Code cell formatting
 Test 3: Empty notebook rendering
   PASS: Empty notebook
 Test 4: Large notebook rendering
   PASS: Large notebook
 Test 5: Save markdown edge cases
 Error: Could not write to file:/dev/null/invalid/path.md
   PASS: Save markdown edge cases

 All extended notebook renderer tests passed!
STOP 0
 === Comprehensive Notebook Output Tests ===
 
 Test 1: Initialization
   PASS: Initialization works correctly
 Test 2: Cell capture
   PASS: Cell capture works correctly
 Test 3: Print functions
   PASS: All print functions work correctly
 Test 4: Error handling
   PASS: Error handling works correctly
 Test 5: Output retrieval
   PASS: Output retrieval works correctly
 Test 6: File operations
   PASS: File operations work correctly
 Test 7: Edge cases
   PASS: Edge cases handled correctly
 Test 8: Memory management
   PASS: Memory management works correctly
 
 All comprehensive notebook output tests PASSED!
 === Notebook System Tests ===

 Test 1: CLI help includes notebook options
   PASS
 Test 2: Notebook CLI execution
   PASS
 Test 3: Output file content validation
   PASS
 Test 4: Cache performance verification
   PASS

 All notebook system tests passed!
STOP 0
 === Extended Notebook Output Tests ===

 Test 1: Basic output capture
   PASS: Basic output capture
 Test 2: Multi-cell output management
   PASS: Multi-cell outputs
 Test 3: Error output handling
   PASS: Error output handling
 Test 4: Output limits and boundaries
   PASS: Output limits
 Test 5: File I/O operations
   PASS: File I/O operations
 Test 6: Edge cases and error conditions
   PASS: Edge cases

 All extended notebook output tests passed!
STOP 0
 === Notebook System Tests ===

 Test 1: Simple notebook execution...
Project is up to date
   PASSED
 Test 2: Notebook with custom output...
Project is up to date
   PASSED
 Test 3: Notebook with verbose mode...
Project is up to date
Running in notebook mode...
 Cache hit: Using existing notebook build
Notebook output saved to: test_notebook_verbose.md
   PASSED
 All notebook system tests passed!
STOP 0
 === Multiple Modules from Same Package Test ===\
 PASS: pyplot_module -> pyplot-fortran
 PASS: pyplot_utils -> pyplot-fortran
 PASS: Both modules have correct git URL
 All tests passed!
 === Different Directories Tests ===\
 Test 1: Run from parent directory using absolute path
 PASS: Absolute path works from different directory

 Test 2: Run from parent directory using relative path
 PASS: Relative path works from different directory

 Test 3: Run from completely different directory
 PASS: Works from completely different directory

 All different directory tests passed!
 === Conflicting Dependencies Tests ===\
 PASS: Multiple modules from same package deduplicated correctly
 All conflicting dependency tests passed!
PASS: Function signature enhancement (real → real(8))
PASS: Parameter type enhancement with intent(in)
PASS: Forward type propagation (variable gets function return type)
PASS: Multiple functions in single file
PASS: Mixed explicit and implicit types
PASS: Nested function calls
Tests: 6/6 passed
Files before test:
-rw-r--r-- 1 ert ert  29 Jul 14 20:16 debug_print.f
-rw-r--r-- 1 ert ert   6 Jul 14 20:16 simple_test.f
-rw-r--r-- 1 ert ert  70 Jul 15 09:11 test_simple_func.f
-rw-r--r-- 1 ert ert 181 Jul 15 09:11 test_simple_func.f90

Running preprocessor test...

Files after test:
-rw-r--r-- 1 ert ert  29 Jul 14 20:16 debug_print.f
-rw-r--r-- 1 ert ert   6 Jul 14 20:16 simple_test.f
-rw-r--r-- 1 ert ert  70 Jul 15 09:11 test_simple_func.f
-rw-r--r-- 1 ert ert 181 Jul 15 09:11 test_simple_func.f90
file1.txt:
Content from test 1
file2.txt:
Content from test 2
file3.txt:
Content from test 3
 Test 1: Default quiet mode
 PASS: Quiet mode suppresses FPM output
 
 Test 2: Verbose mode (-v)
 PASS: Verbose mode shows FPM output
 
 Test 3: Very verbose mode (-vv)
 PASS: Very verbose mode shows detailed output
 
 All verbose tests passed!
PASS: Explicit function with parameters gets intent(in)
FAIL: Parameters get intent(in) by default
PASS: real converts to real(8) for explicitness
Tests: 2/3 passed
FAILED: 1 tests failed
STOP 1
 === Error Handling Tests ===

 Test 1: Unknown module error message
 PASS: Unknown module error handled correctly

 Test 2: Module error forwarding
 PASS: Module error forwarding working

 Test 3: FPM error forwarding
 PASS: FPM error forwarding working


 All error handling tests passed!
 === Main Application Coverage Tests ===

 Test 1: Help output coverage
   PASS: Help output
 Test 2: Normal execution mode coverage
   WARNING: Normal execution failed
   WARNING: Expected output not found
   PASS: Normal execution mode
 Test 3: Notebook execution mode coverage
   WARNING: Notebook output file not created
   PASS: Notebook execution mode
 Test 4: Verbose modes coverage
   WARNING: Verbose mode (-v) failed
   WARNING: Very verbose mode (-vv) failed
   PASS: Verbose modes
 Test 5: Error handling coverage
   PASS: Error handling

 All main coverage tests passed!
STOP 0
Testing literal round trip...
PASS: Literal round trip
Testing assignment round trip...
PASS: Assignment round trip
Testing expression round trip...
PASS: Expression round trip
All parse and codegen integration tests passed
STOP 0
 === Figure Capture Unit Tests ===

 Test 1: Initialization and finalization
   PASS
 Test 2: Enable/disable functionality
   PASS
 Test 3: Base64 encoding functionality
   PASS
 Test 4: Figure data retrieval
   PASS
 Test 5: Show interceptor functionality
WARNING: The convert command is deprecated in IMv7, use "magick" instead of "convert" or "magick convert"

   PASS

 All figure capture tests passed!
STOP 0
 === Figure Capture Coverage Tests ===

 Test 1: Figure capture initialization
   PASS: Initialization
 Test 2: Figure saving functionality
   WARNING: Figure counter incorrect
   PASS: Figure saving
 Test 3: Show command interception
WARNING: The convert command is deprecated in IMv7, use "magick" instead of "convert" or "magick convert"

   PASS: Show interception
 Test 4: Base64 conversion
   PASS: Base64 conversion
 Test 5: Cleanup functionality
   PASS: Cleanup

 All figure capture coverage tests passed!
STOP 0
 === Extended Figure Capture Tests ===

 Test 1: Figure directory operations
   PASS: Directory operations
 Test 2: Base64 encoding edge cases
   PASS: Base64 edge cases
 Test 3: Figure counter behavior
   PASS: Counter behavior
 Test 4: Show interceptor edge cases
 Figure would be displayed here
WARNING: The convert command is deprecated in IMv7, use "magick" instead of "convert" or "magick convert"

WARNING: The convert command is deprecated in IMv7, use "magick" instead of "convert" or "magick convert"

WARNING: The convert command is deprecated in IMv7, use "magick" instead of "convert" or "magick convert"

   PASS: Interceptor edge cases
 Test 5: Error conditions and boundary cases
 Figure would be displayed here
   PASS: Error conditions

 All extended figure capture tests passed!
STOP 0
 Test 1: First run with custom cache directory
 PASS: Cache directory created
 PASS: First run shows build output
 
 Test 2: Second run should use cache
 PASS: Second run appears to use cache (less output)
 
 Test 3: Verify program output is consistent
 PASS: Program output consistent across runs
 
 All cache tests passed!
 === Notebook Caching Tests ===

 Test 1: Cache directory creation
   PASS
 Test 2: Cache reuse with same content
   PASS
 Test 3: Cache invalidation with different content
   PASS

 All notebook caching tests passed!
STOP 0
 === FPM Cache Integration Tests ===\
 Test 1: FPM source discovery
 Creating test directory: /tmp/fpm_test_sources_20250715091633
 Creating file: /tmp/fpm_test_sources_20250715091633/app/test.f90
 Test file exists: /tmp/fpm_test_sources_20250715091633/app/test.f90
 Testing Fortran CLI tool with long path...
 Test 1 passed: Fortran CLI tool works with long paths
 PASS: FPM source discovery works, found -1880498176 sources

 Test 2: Source file information access
 PASS: Can access source file path length:          43
 PASS: Can access source file path:/tmp/fpm_test_info_20250715091633/hello.f90
 PASS: Fortran CLI tool works with long paths
 PASS: Test file exists and is accessible

 All FPM cache integration tests passed!
 === Artifact Cache Tests ===
 Test 1: Content-based hashing
 PASS: Content hashing works

 Test 2: Store/retrieve cycle
 PASS: Store/retrieve cycle works

 Test 3: Cache management
 PASS: Cache management works

 All artifact cache tests passed!
Running module cache integration tests...

Test 1: Cache with real module compilation
  ✓ Module compiled successfully
 + mkdir -p /home/ert/.cache/fortran/modules/gfortran/13.0.0/0000000000008235
  ✓ Compiled module cached successfully
  ✓ Module retrieved from cache with .mod file
  ✓ Cached module usable in compilation
Test 2: Cache with module dependencies
  ✓ Cache keys differ with/without dependencies
    Without deps: 000000000000D903
    With deps: 000000000000749F
Test 3: Cache invalidation on source change
 + mkdir -p /tmp/fortran_inval_test_20250715091634  
  ✓ Cache key changes when source is modified
Test 4: Cross-project module sharing
 + mkdir -p /home/ert/.cache/fortran/modules/gfortran/13.0.0/0000000000015B38
  ✓ Module shared between projects via cache
  ✓ Cached module usable in different project

All integration tests passed!
STOP 0
Testing cache lock functionality...

Test 1: Basic lock acquisition and release
Using cache dir: /tmp/fortran_cache_lock_test_20250715091634
  ✓ Lock acquired successfully
-rw-r--r-- 1 ert ert 22 Jul 15 09:16 /tmp/fortran_cache_lock_test_20250715091634/test_project.lock
  ✓ Lock is detected as locked
  ✓ Lock released successfully

Test 2: Lock conflict with no-wait
  ✓ First lock acquired
  ✓ Second lock correctly failed with no-wait
  ✓ Lock released

Test 3: Multiple different project locks
  ✓ Multiple project locks acquired successfully
  ✓ All locks released

Test 4: Stale lock cleanup
  ✓ Stale lock was cleaned up and new lock acquired

All cache lock tests passed!
Running module cache unit tests...

Test 1: Cache directory creation
  ✓ Module cache directory path determined
    Path: /home/ert/.cache/fortran/modules
Test 2: Cache key generation
  ✓ Different sources generate different cache keys
    Key1: 0000000000003039
    Key2: 0000000000010932
  ✓ Same source generates consistent cache key
Test 3: Module storage and retrieval
 + mkdir -p /tmp/fortran_test_build_20250715091634
 + mkdir -p /tmp/fortran_test_target_20250715091634
 + mkdir -p /home/ert/.cache/fortran/modules/gfortran/13.0.0/000000000001869F
  ✓ Module stored in cache successfully
  ✓ Module retrieved from cache successfully
  ✓ Module file (.mod) retrieved correctly
Test 4: Cache hit detection
 + mkdir -p /tmp/fortran_cache_hit_20250715091634
 + mkdir -p /tmp/fortran_test_hit_20250715091634
  ✓ Cache miss detected correctly before storing
 + mkdir -p /tmp/fortran_cache_hit_20250715091634/gfortran/13.0.0/0000000000002B67
  ✓ Cache hit detected correctly after storing
Test 5: Disabled cache behavior
  ✓ Cache disabled via environment variable
  ✓ Disabled cache returns not found

All unit tests passed!
STOP 0
 PASS: Verbose level mapping
 PASS: Log level filtering
 PASS: Debug categories enabled correctly
 
Tests: 3/3 passed
 Testing: JSON tokens -> parser -> AST -> code
 - Loaded            4  tokens from JSON
 - Parsed tokens to AST
 - Generated code: 'y = 5.5d0'
 PASS: Complete JSON -> tokens -> parser -> code workflow
 
 Testing: JSON AST -> codegen
 - Loaded AST from JSON
 - Generated code:
 program test
    implicit none
    real(8) :: result

    result = x * 2
end program test
 PASS: JSON AST -> code generation workflow
 All JSON workflow tests passed!
STOP 0
 === Frontend API Comprehensive Tests ===

 Testing lexer API...
   PASS: Simple assignment tokenization
   PASS: Operator tokenization
   PASS: Keyword tokenization
 Testing parser API...
   PASS: Assignment parsing
   WARN: Binary operation parsed as different node type
   PASS: Literal parsing
 Testing semantic analyzer API...
   PASS: Semantic analysis completed
 Testing code generation API...
   PASS: Assignment code generation
   PASS: Program code generation
 Testing end-to-end API workflow...
   PASS: End-to-end API workflow

 All frontend API tests passed!
STOP 0
15
 === Frontend Test Cases ===
 Found          15 test cases inexample/frontend_test_cases
 
 PASS: example
 PASS: function_call_inference
 PASS: function_def
 PASS: function_with_param
 PASS: json_workflow
 PASS: multi_statement
 PASS: multiple_functions
 PASS: multiple_statements
 PASS: nested_function_calls
 PASS: print_statement
 PASS: simple_assignment
 PASS: single_assignment
 PASS: single_function_in_program
 PASS: single_real_declaration
 PASS: use_statement
 
 === Summary ===
Tests: 15/15 passed
 All tests passed!
 Testing Simple Fortran file detection...
   ✓ File detection works correctly
 Testing basic compilation...
   ✓ Basic compilation works
 All frontend basic tests passed!
 All type substitution tests passed!
PASS: Integer addition
PASS: Real addition
PASS: Mixed multiplication
PASS: Integer/Real division
PASS: Real power with integer
PASS: sqrt() return type
PASS: sin() return type
PASS: abs() with integer
PASS: abs() with real
PASS: max() with multiple reals
PASS: min() with integers
PASS: String concatenation
PASS: Variable + literal concat
PASS: trim() return type
PASS: len() return type
PASS: Logical AND
PASS: Logical NOT
PASS: Integer comparison
PASS: Real equality
PASS: String comparison
Tests: 20/20 passed
PASS: Integer array literal
PASS: Single element array
PASS: Real array literal
PASS: Mixed int/real array
PASS: String array literal
PASS: Logical array literal
PASS: Large array size detection
PASS: Empty array detection
PASS: 2D array literal
PASS: 3D array (skip for now)
PASS: sum() return type
PASS: Array average calculation
PASS: size() return type
PASS: Array element access
PASS: 2D array element access
PASS: Array constructor
PASS: Expression in constructor
PASS: Array slice
PASS: Complex slicing
Tests: 19/19 passed
=== Type Inference Integration Tests ===

Test 1: Basic type inference integration
    DEBUG: Generated file contents:
      program main
          implicit none
          integer(4) :: count
          real(8) :: pi
          character(len=*) :: name
          character(len=*) :: ready
      
          count = 42
          pi = 3.14159d0
          name = "Fortran"
          ready =
          print *, count, pi, name, ready
      end program main
  ✗ FAIL: Basic type inference failed
    Error: Missing expected declarations, missing: character(len=7) :: name, missing: logical :: ready
Test 2: Arithmetic expressions integration
    DEBUG: Generated file contents:
      program main
          implicit none
          integer(4) :: a
          integer(4) :: b
          real(8) :: sum
          real(8) :: diff
          real(8) :: prod
          real(8) :: quot
      
          a = 10
          b = 20
          sum = a + b
          diff = a - b
          prod = a * b
          quot = 5.0d0 / 2.0d0
          print *, sum, diff, prod, quot
      end program main
  ✗ FAIL: Arithmetic expression inference failed
    Error: Missing expected declarations, missing: integer(4) :: sum, missing: integer(4) :: diff, missing: integer(4) :: prod
Test 3: Mixed type expressions integration
  ✓ PASS: Mixed type promotion works correctly
Test 4: Intrinsic functions integration
  ✓ PASS: Intrinsic function return types correctly inferred
Test 5: Print statement filtering
  ✓ PASS: Print statements correctly filtered

Type inference integration tests: 3/5 passed
ERROR STOP Some integration tests failed!

Error termination. Backtrace:
#0  0x402765 in test_type_inference_integration
	at test/frontend/semantic/test_frontend_semantic_inference_integration.f90:23
#1  0x4075f2 in main
	at test/frontend/semantic/test_frontend_semantic_inference_integration.f90:22
PASS: Function parameter inference from usage
PASS: Function parameter from integer literal
PASS: Multiple parameter inference
PASS: Mixed parameter types promote to real
PASS: Arithmetic return type
PASS: Logical return type
PASS: String return type
PASS: Conditional return analysis
PASS: Intrinsic function return
PASS: Nested function call inference
PASS: Multiple nested calls
PASS: Recursive function analysis
PASS: Complex recursion
PASS: Function result assignment
PASS: Function in initialization
PASS: Functions in expressions
PASS: Function comparison
PASS: Function as parameter
Tests: 18/18 passed
 Testing semantic context creation...
 PASS: Semantic context created successfully
 next_var_id =           1
STOP 0
 === Semantic Analyzer API Unit Tests ===

 Testing assignment analysis...
   PASS: Assignment analysis
 Testing type inference...
   PASS: Type inference performed
 Testing variable analysis...
   PASS: Variable analysis
 Testing expression analysis...
   PASS: Expression analysis
 Testing error detection...
   PASS: Error detection test completed

 All semantic analyzer API tests passed!
STOP 0
 === Lexer API Unit Tests ===

 Testing identifier tokenization...
   PASS: Identifier tokenization
 Testing number tokenization...
   PASS: Number tokenization
 Testing operator tokenization...
   PASS: Operator tokenization
 Testing keyword tokenization...
   PASS: Keyword tokenization
 Testing string tokenization...
   PASS: String tokenization
 Testing comment handling...
   PASS: Comment handling (implementation-dependent)
   PASS: Code with comment

 All lexer API tests passed!
STOP 0
Testing integer literal tokenization...
PASS: Integer literal tokenization
Testing real literal tokenization...
PASS: Real literal tokenization
Testing scientific notation tokenization...
PASS: Scientific notation tokenization
Testing number tokenization edge cases...
PASS: Number tokenization edge cases
All number tokenization tests passed
STOP 0
Testing complex expression serialization...
PASS: Complex expression serialization
Testing program structure serialization...
PASS: Program structure serialization
Testing special characters serialization...
PASS: Special characters serialization
Testing large input serialization...
PASS: Large input serialization
All comprehensive serialization tests passed
STOP 0
 Testing: 'x = 1'
 PASS: Simple assignment tokenized correctly
 All lexer assignment tests passed!
STOP 0
Testing program structure keyword tokenization...
PASS: Program structure keyword tokenization
Testing control flow keyword tokenization...
PASS: Control flow keyword tokenization
Testing type keyword tokenization...
PASS: Type keyword tokenization
Testing I/O keyword tokenization...
PASS: I/O keyword tokenization
Testing case-insensitive keyword recognition...
PASS: Case-insensitive keyword recognition
All keyword tokenization tests passed
STOP 0
Testing arithmetic operator tokenization...
PASS: Arithmetic operator tokenization
Testing comparison operator tokenization...
PASS: Comparison operator tokenization
Testing assignment operator tokenization...
PASS: Assignment operator tokenization
Testing delimiter tokenization...
PASS: Delimiter tokenization
All operator tokenization tests passed
STOP 0
 Testing: Parse assignment from JSON tokens
 PASS: Got assignment node from JSON tokens
 PASS: Target is 'x'
 PASS: Value is '42'
 All parser JSON tests passed!
STOP 0
 DEBUG: Testing single declaration 'real :: x'
 DEBUG: Tokens created:            4
 DEBUG: Statement allocated successfully
 PASS: Single declaration parsed correctly
 PASS: Multiple declarations return non-literal node
 PASS: Declaration with initialization returns non-literal node
 All parser declaration tests passed!
Testing simple literal parsing...
PASS: Simple literal parsing
Testing simple identifier parsing...
PASS: Simple identifier parsing
Testing simple assignment parsing...
PASS: Simple assignment parsing
All basic parser tests passed
STOP 0
 Testing: 'real :: x'
 FAIL: Expected literal node for skipped declaration
 Some parser declaration tests failed!
STOP 1
 Testing: 'x = 1'
 PASS: Got assignment node
 PASS: Target is identifier 'x'
 PASS: Value is literal '1'
 All parser assignment tests passed!
STOP 0
 === Parser API Unit Tests ===

 Testing assignment parsing...
   PASS: Simple assignment parsing
   PASS: Assignment with expression parsing
 Testing binary operation parsing...
   PASS: Addition parsing
   PASS: Multiplication parsing
 Testing literal parsing...
   PASS: Integer literal parsing
   PASS: Real literal parsing
 Testing identifier parsing...
   PASS: Identifier parsing
 Testing print statement parsing...
   PASS: Print statement parsing
 Testing declaration parsing...
   PASS: Declaration parsing

 All parser API tests passed!
STOP 0
Testing simple addition parsing...
PASS: Simple addition parsing
Testing multiplication precedence parsing...
PASS: Multiplication precedence parsing
Testing parentheses precedence parsing...
PASS: Parentheses precedence parsing
Testing comparison operator parsing...
PASS: Comparison operator parsing
All binary operation parsing tests passed
STOP 0
 Testing: AST from JSON - simple assignment
 Generated code: 'program main
    implicit none
    integer(4) :: x

    x = 42
end program main'
 PASS: Got program node
 PASS: Program has 1 statement
 PASS: First statement is assignment
 
 Testing: AST from JSON - binary operation
 PASS: Got binary_op node
 PASS: Operator is '+'
 PASS: Left operand is 'a'
 PASS: Right operand is '2'
 All AST JSON tests passed!
STOP 0
PASS: Simplest function definition - no compilation errors
PASS: Simplest function definition - generates valid Fortran
Tests: 2/2 passed
Testing nested binary operations...
PASS: Nested binary operations
Testing parentheses generation...
PASS: Parentheses test (basic functionality)
Testing complex expression generation...
PASS: Complex expression generation
All expression code generation tests passed
STOP 0
Testing statement code generation...
PASS: Statement generation
Testing use statement generation...
PASS: Use statement generation
Testing print statement generation...
PASS: Print statement generation
All program code generation tests passed
STOP 0
 === Code Generation API Unit Tests ===

 Testing assignment code generation...
   PASS: Assignment code generation
     Generated:x = 42
 Testing literal code generation...
   PASS: Integer literal code generation
   PASS: Real literal code generation
 Testing binary operation code generation...
   PASS: Binary operation code generation
     Generated:a + b
 Testing print statement code generation...
   PASS: Print statement code generation
     Generated:print *, result
 Testing program code generation...
   PASS: Program code generation
     Generated length:         105 characters
 Testing identifier code generation...
   PASS: Identifier code generation
     Generated:variable_name

 All code generation API tests passed!
STOP 0
Testing literal code generation...
PASS: Literal code generation
Testing identifier code generation...
PASS: Identifier code generation
Testing assignment code generation...
PASS: Assignment code generation
Testing binary operation code generation...
PASS: Binary operation code generation
All basic code generation tests passed
STOP 0
 Testing: Code generation from AST (simulated JSON input)
 PASS: Generated code from 'AST': 'y = 3.14d0'
 NOTE: Full JSON->AST deserialization still needs implementation
 All codegen JSON tests passed!
STOP 0
 Testing: assignment code generation for 'x = 1'
 PASS: Generated code is correct: 'x = 1'
 All codegen assignment tests passed!
STOP 0
 === Extended Config Tests ===

 Test 1: Config directory with different environment variables
   WARNING: XDG_CONFIG_HOME test may not work properly
   WARNING: HOME test may not work properly
   PASS: Environment variable handling
 Test 2: Config directory creation edge cases
mkdir: cannot create directory ‘/dev/null’: Not a directory
mkdir: cannot create directory ‘’: No such file or directory
   PASS: Directory creation edge cases
 Test 3: Registry path construction
   PASS: Registry path construction
 Test 4: Windows path handling
   WARNING: Windows path fallback may not work properly
   PASS: Windows path handling
 Test 5: Fallback scenarios
   WARNING: Ultimate fallback should use .fortran-config
   PASS: Fallback scenarios

 All extended config tests passed!
STOP 0
Testing --clear-cache option...
(Would test with 2 arguments)

Program received signal SIGSEGV: Segmentation fault - invalid memory reference.

Backtrace for this error:
#0  0x7f0cc6f55eef in ???
#1  0x7f0cc7084a09 in ???
#2  0x402a5e in __cli_MOD_parse_arguments
	at ././src/cli/cli.f90:42
#3  0x4022b7 in test_clear_cache_option
	at test/cli/test_cli_cache.f90:62
 === System CLI Tests ===

 Created test file: /tmp/test_cli_sys_091634.f90
 Test 1: No arguments (should show help)
 PASS: No arguments shows help

 Test 2: --help flag
 PASS: --help flag works

 Test 3: -h flag
 PASS: -h flag works

 Test 4: Basic execution
 Error: Expected output "CLI System Test Output" not found
 Error: Expected exit code            0  but got            1
 FAIL: Basic execution test failed
STOP 1
 === CLI Debug Arguments Tests ===

 Testing --debug-tokens flag...
(Testing with 3 arguments)
 PASS: --debug-tokens flag works
 Testing --debug-ast flag...
(Testing with 3 arguments)
 PASS: --debug-ast flag works
 Testing --debug-codegen flag...
(Testing with 3 arguments)
 PASS: --debug-codegen flag works
 Testing multiple debug flags...
(Testing with 6 arguments)
 PASS: Multiple debug flags work
 Testing JSON input flags...
(Testing with 3 arguments)
(Testing with 3 arguments)
(Testing with 3 arguments)
 PASS: All JSON input flags work correctly

 All CLI debug tests passed!
STOP 0
 === Comprehensive CLI Tests ===
 
 Test 1: Empty arguments
   PASS: Empty arguments trigger help
 Test 2: Help arguments
   PASS: Help arguments work correctly
 Test 3: Verbose arguments
   PASS: All verbose arguments work correctly
 Test 4: Directory arguments
   PASS: Directory arguments work correctly
 Test 5: Parallel arguments
   PASS: Parallel arguments work correctly
 Test 6: Notebook arguments
   PASS: Notebook arguments work correctly
 Test 7: Complex argument combinations
   PASS: Complex argument combinations work correctly
 Test 8: Edge cases
   PASS: Edge cases handled correctly
 
 All comprehensive CLI tests PASSED!
 === CLI Integration Tests ===

 Testing basic file processing...
   PASS: Basic file processing works
 Testing debug output pipeline...
   PASS: All debug output flags work
 Testing JSON pipeline workflow...
   PASS: --from-tokens pipeline works
   PASS: --from-ast pipeline works
 Testing error handling...
   PASS: Non-existent file properly handled
   PASS: Invalid JSON properly handled

 All CLI integration tests passed!
STOP 0
 === CLI JSON Options Tests ===

 Testing JSON pipeline functionality...
   Testing --from-tokens...
     PASS: --from-tokens executed successfully
   Testing --from-ast...
     PASS: --from-ast executed successfully
   Testing --from-semantic...
     PASS: --from-semantic executed successfully

 All CLI JSON option tests passed!
STOP 0
=== Standard Fortran 95 Passthrough Tests ===

Test 1: Simple program passthrough
  ✗ FAIL: Simple program modified
    First 3 lines of input:
      program test
          implicit none
          integer :: i
    First 3 lines of output:
      /home/ert/.cache/fortran/test_simple_prog_fpm_A1660FF0737DB74C/build/gfortran_E34ED9D522D08DD2/test_simple_prog/app_main.f90.o
       i =          42
Test 2: Module passthrough
  ✗ FAIL: Compilation failed
Test 3: Complex program with arrays and loops
  ✗ FAIL: Compilation failed

Fortran 95 passthrough tests: 0/3 passed
ERROR STOP Some Fortran 95 passthrough tests failed!

Error termination. Backtrace:
#0  0x4018a6 in test_fortran95_passthrough
	at test/standard_fortran/test_fortran95_passthrough.f90:21
#1  0x404151 in main
	at test/standard_fortran/test_fortran95_passthrough.f90:20
 === Comprehensive Registry Resolver Tests ===
 
 Test 1: Registry creation
 Created default registry at: /tmp/test_registry_config/registry.toml
   PASS: Registry creation works correctly
 Test 2: Registry loading
   PASS: Registry loading works correctly
 Test 3: Module resolution
   PASS: Module resolution works correctly
 Test 4: Version resolution
   PASS: Version resolution works correctly
 Test 5: Registry validation
   PASS: Registry validation works correctly
 Test 6: Custom registry paths
   PASS: Custom registry paths work correctly
 Test 7: Prefix matching
   PASS: Prefix matching works correctly
 Test 8: Underscore inference
   PASS: Underscore inference works correctly
 Test 9: Error handling
 Warning: Cannot open registry at /tmp/definitely_nonexistent_registry.toml
mkdir: cannot create directory ‘/dev/null’: Not a directory
 Error: Cannot create config directory: /dev/null/invalid_path
   PASS: Error handling works correctly
 Test 10: Edge cases
   PASS: Edge cases handled correctly
 
 All comprehensive registry resolver tests PASSED!
 === Registry Validation Tests ===\
 Test 1: Valid registry
 PASS: Valid registry loaded successfully

 Test 2: Invalid TOML syntax
 PASS: Invalid syntax detected: Package section found before [packages] section at line 5

 Test 3: Missing required fields
 PASS: Missing fields handled gracefully (optional fields)

 Test 4: Empty registry
 PASS: Empty registry handled gracefully

 All registry validation tests passed!
 === Version Constraints Tests ===\
 PASS: pyplot_module -> pyplot-fortran v1.0.0
 PASS: fortplot_test -> fortplotlib (no version)
 All version constraint tests passed!
 === Registry Enhancement Tests ===\

 Test 1: Multiple modules from same package
 Note: Could not read generated fpm.toml
 PASS: Multiple modules from same package handled correctly


 All registry enhancement tests passed!
 === Registry Resolver Tests ===

 Test 1: Module with prefix (fortplot)
 PASS: fortplot -> fortplotlib

 Test 2: Module with prefix (fortplot_utils)
 PASS: fortplot_utils -> fortplotlib (via prefix)

 Test 3: Module with underscore (pyplot_module)
 PASS: pyplot_module -> pyplot-fortran

 Test 4: Unknown module
 PASS: Unknown module correctly not found

 Test 5: Git URL retrieval
 PASS: Correct git URL retrieved

 All registry resolver tests passed!
 === Module Scanner Tests ===

 Test 1: Simple module detection
 PASS: Found both modules

 Test 2: Module with only clause
 PASS: Correctly extracted module from only clause

 Test 3: Intrinsic module filtering
 PASS: Intrinsic modules correctly filtered

 All module scanner tests passed!
 === Extended Module Scanner Tests ===

 Test 1: Complex use statements
   WARNING: my_module not found
   PASS: Complex use statements
 Test 2: Edge case formatting
   WARNING: Expected to find 4 modules, found           2
   PASS: Edge case formatting
 Test 3: Intrinsic module filtering
   PASS: Intrinsic module filtering
 Test 4: Error conditions and edge cases
 Error: Cannot open file /tmp/definitely_nonexistent_file.f90
   PASS: Error conditions
 Test 5: Duplicate module handling
   PASS: Duplicate module handling

 All extended module scanner tests passed!
STOP 0
=============================================================
Running Fortran CLI Example Tests
=============================================================

Running: example/hello/hello.f90...
  ✓ PASS: example/hello/hello.f90 (exit code 0)

Running: example/hello/hello.f...
  ✓ PASS: example/hello/hello.f (exit code 0)

Running: example/calculator/calculator.f90...
  ✓ PASS: example/calculator/calculator.f90 (exit code 0)
    ✓ Calculator output correct

Running: example/calculator/calculator.f...
  ✓ PASS: example/calculator/calculator.f (exit code 0)
    ✓ Calculator output correct

Running: example/precision/precision_test.f90...
  ✓ PASS: example/precision/precision_test.f90 (exit code 0)

Running: example/precision/precision_test.f...
  ✓ PASS: example/precision/precision_test.f (exit code 0)

Running: example/precision/precision_compare.f90...
  ✓ PASS: example/precision/precision_compare.f90 (exit code 0)

Running: example/precision/precision_compare.f...
  ✓ PASS: example/precision/precision_compare.f (exit code 0)

Running: example/precision/real_default_test.f90...
  ✓ PASS: example/precision/real_default_test.f90 (exit code 0)
    ✓ Standard single precision confirmed (.f90)

Running: example/precision/real_default_test.f...
  ✗ FAIL: example/precision/real_default_test.f (exit code 1)
    Error output:
    Project is up to date | <ERROR> Compilation failed for object " app_main.f90.o " | Error: Symbol ‘x’ at (1) has no IMPLICIT type | Error: Symbol ‘x4’ at (1) has no IMPLICIT type | Error: Symbol ‘x8’ at (1) has no IMPLICIT type | Error: Symbol ‘x’ at (1) has no IMPLICIT type | Error: Symbol ‘x4’ at (1) has no IMPLICIT type | Error: Symbol ‘x8’ at (1) has no IMPLICIT type | <ERROR> stopping due to failed compilation | STOP 1 | <ERROR> Execution for object " fortran " returned exit code  1 | <ERROR> *cmd_run*:stopping due to failed executions | STOP 1

Running: example/interdependent/main.f90...
  ✓ PASS: example/interdependent/main.f90 (exit code 0)
    ✓ Interdependent modules working correctly

Running: example/interdependent/main.f...
  ✓ PASS: example/interdependent/main.f (exit code 0)
    WARNING: Interdependent modules may not be working

Running: example/type_inference/calculate.f90...
  ✓ PASS: example/type_inference/calculate.f90 (exit code 0)
    ✓ Type inference example output correct

Running: example/type_inference/calculate.f...
  ✗ FAIL: example/type_inference/calculate.f (exit code 1)
    Error output:
    Project is up to date | <ERROR> Compilation failed for object " app_main.f90.o " | Error: Entity with assumed character length at (1) must be a dummy argument or a PARAMETER | <ERROR> stopping due to failed compilation | STOP 1 | <ERROR> Execution for object " fortran " returned exit code  1 | <ERROR> *cmd_run*:stopping due to failed executions | STOP 1

Running: example/type_inference/all_types.f90...
  ✓ PASS: example/type_inference/all_types.f90 (exit code 0)
    ✓ All type inference working correctly

Running: example/type_inference/all_types.f...
  ✗ FAIL: example/type_inference/all_types.f (exit code 1)
    Error output:
    Project is up to date | <ERROR> Compilation failed for object " app_main.f90.o " | Error: Invalid character in name at (1) | Error: Entity with assumed character length at (1) must be a dummy argument or a PARAMETER | Error: Entity with assumed character length at (1) must be a dummy argument or a PARAMETER | <ERROR> stopping due to failed compilation | STOP 1 | <ERROR> Execution for object " fortran " returned exit code  1 | <ERROR> *cmd_run*:stopping due to failed executions | STOP 1

Running: example/advanced_inference/arrays.f90...
  ✓ PASS: example/advanced_inference/arrays.f90 (exit code 0)
    ✓ Array inference working correctly

Running: example/advanced_inference/arrays.f...
  ⚠ EXPECTED FAIL: example/advanced_inference/arrays.f (exit code 1) - Known preprocessor issue

Running: example/advanced_inference/derived_types.f90...
  ✓ PASS: example/advanced_inference/derived_types.f90 (exit code 0)

Running: example/advanced_inference/derived_types.f...
  ⚠ EXPECTED FAIL: example/advanced_inference/derived_types.f (exit code 1) - Known preprocessor issue

Running: example/notebook/simple_math.f90...
  ✓ PASS: example/notebook/simple_math.f90 (exit code 0)
    ✓ Notebook math example working correctly

Running: example/notebook/simple_math.f...
  ✓ PASS: example/notebook/simple_math.f (exit code 0)
    ✓ Notebook math example working correctly

Running: example/notebook/arrays_loops.f90...
  ✓ PASS: example/notebook/arrays_loops.f90 (exit code 0)

Running: example/notebook/arrays_loops_simple.f...
  ⚠ EXPECTED FAIL: example/notebook/arrays_loops_simple.f (exit code 1) - Known preprocessor issue

Running: example/notebook/control_flow.f90...
  ✓ PASS: example/notebook/control_flow.f90 (exit code 0)

Running: example/notebook/control_flow_simple.f...
  ✗ FAIL: example/notebook/control_flow_simple.f (exit code 1)
    Error output:
    Project is up to date | <ERROR> Compilation failed for object " app_main.f90.o " | Error: Invalid character in name at (1) | Error: Invalid character in name at (1) | Error: Invalid character in name at (1) | Error: Unexpected CASE statement at (1) | Error: Unexpected CASE statement at (1) | Error: Unexpected CASE statement at (1) | Error: Unexpected CASE statement at (1) | Error: Unexpected CASE statement at (1) | Error: Symbol ‘i’ at (1) has no IMPLICIT type | Error: Entity with assumed character length at (1) must be a dummy argument or a PARAMETER | <ERROR> stopping due to failed compilation | STOP 1 | <ERROR> Execution for object " fortran " returned exit code  1 | <ERROR> *cmd_run*:stopping due to failed executions | STOP 1

Running: example/step1_explicit_types/step1_demo.f90...
  ✓ PASS: example/step1_explicit_types/step1_demo.f90 (exit code 0)
    ✓ Step 1 explicit types working correctly

Running: example/step1_explicit_types/step1_demo.f...
  ✓ PASS: example/step1_explicit_types/step1_demo.f (exit code 0)
    ✓ Step 1 explicit types working correctly

Running: example/advanced_inference/function_returns.f90...
  ✓ PASS: example/advanced_inference/function_returns.f90 (exit code 0)
    WARNING: Function returns inference may not be working

Running: example/advanced_inference/function_returns.f...
  ⚠ EXPECTED FAIL: example/advanced_inference/function_returns.f (exit code 1) - Known preprocessor issue

Running: example/advanced_inference/intrinsic_functions.f90...
  ✓ PASS: example/advanced_inference/intrinsic_functions.f90 (exit code 0)
    ✓ Intrinsic functions example working

Running: example/advanced_inference/intrinsic_functions.f...
  ✗ FAIL: example/advanced_inference/intrinsic_functions.f (exit code 1)
    Error output:
    Project is up to date | <ERROR> Compilation failed for object " app_main.f90.o " | Error: Entity with assumed character length at (1) must be a dummy argument or a PARAMETER | Error: Missing actual argument ‘a’ in call to ‘abs’ at (1) | <ERROR> stopping due to failed compilation | STOP 1 | <ERROR> Execution for object " fortran " returned exit code  1 | <ERROR> *cmd_run*:stopping due to failed executions | STOP 1

Running: example/plotting/plot_demo.f90...
  ✓ PASS: example/plotting/plot_demo.f90 (exit code 0)

=============================================================
Testing Incremental Compilation (Caching)
=============================================================

Using temporary cache: /tmp/fortran_test_cache_20250715_091657
First run (should compile)...
  ✓ First run compiled files as expected
  ✓ Cache miss detected on first run
Second run (should use cache)...
  ✓ Cache hit detected on second run
  ✓ FPM detected no compilation needed
  ✓ No compilation occurred on second run
  ✓ PASS: Incremental compilation working correctly
Cleaned up temporary cache directory

=============================================================
Testing Source Modification with Cached Dependencies
=============================================================

Using temporary cache: /tmp/fortran_test_cache_20250715_091658
Using temporary source: /tmp/fortran_test_source_20250715_091658/main.f90
First run (should compile everything)...
  ✓ First run compiled files as expected
Second run (should use cache completely)...
  ✓ Cache hit detected on second run
  ✓ FPM detected no compilation needed on second run
Modifying source file...
Third run (should compile only modified file)...
  ✓ Cache hit detected on third run (reusing project)
  ✓ FPM detected file changes and recompiled
  ✓ Incremental compilation occurred
  ✓ PASS: Source modification with cached dependencies working correctly
Cleaned up temporary files and cache directory

=============================================================
Testing Complex Dependency Changes
=============================================================

Using temporary cache: /tmp/fortran_complex_dep_cache_20250715_091659
Using temporary source: /tmp/fortran_complex_dep_source_20250715_091659
Test 1: Initial compilation with dependencies...
  ✓ Initial compilation successful
Test 2: Modifying dependency module...
  ✓ Dependency change created new cache (expected behavior)
  ✓ Recompilation occurred for changed dependency
Test 3: Adding new dependency...
  ✓ PASS: Complex dependency changes handled correctly
Cleaned up temporary directories

=============================================================
Testing .f to .f90 Preprocessor Output Correctness
=============================================================

Using temporary cache: /tmp/fortran_preproc_test_20250715_091701
Testing: example/hello/hello.f vs example/hello/hello.f90
  ✓ PASS: Outputs match
Testing: example/calculator/calculator.f vs example/calculator/calculator.f90
  ⚠ EXPECTED FAIL: example/calculator/calculator.f failed to run (known preprocessor issue)
Testing: example/type_inference/calculate.f vs example/type_inference/calculate.f90
  ⚠ EXPECTED FAIL: example/type_inference/calculate.f failed to run (known preprocessor issue)
Testing: example/type_inference/all_types.f vs example/type_inference/all_types.f90
  ⚠ EXPECTED FAIL: example/type_inference/all_types.f failed to run (known preprocessor issue)
Cleaned up temporary cache directory

=============================================================
Test Summary
=============================================================
Total tests: 37
Passed: 28
Failed: 5
Expected failures: 4

OVERALL: FAILED (unexpected failures)
STOP 1
<ERROR> Execution for object " test_frontend_statements " returned exit code  1
<ERROR> Execution for object " test_runner_comprehensive " returned exit code  1
<ERROR> Execution for object " test_step1_integration " returned exit code  1
<ERROR> Execution for object " test_frontend_semantic_inference_integration " returned exit code  1
<ERROR> Execution for object " test_frontend_parser_declaration " returned exit code  1
<ERROR> Execution for object " test_cli_cache " returned exit code  139
<ERROR> Execution for object " test_cli_system " returned exit code  1
<ERROR> Execution for object " test_fortran95_passthrough " returned exit code  1
<ERROR> Execution for object " test_examples " returned exit code  1
<ERROR> *cmd_run*:stopping due to failed executions
STOP 1
